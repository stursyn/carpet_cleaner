buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE"
        classpath 'com.netflix.nebula:nebula-release-plugin:11.0.0'
    }
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'war'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    group = "kz.nu.carpet_cleaner"

    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    [compileJava, compileTestJava]*.options*.debugOptions*.debugLevel = "source,lines,vars"
}

subprojects {
    task allDeps(type: DependencyReportTask) {}

    apply plugin: 'io.spring.dependency-management'

    dependencies {
        ext.jacksonVersion = "2.7.3"
        ext.greetgoUtilVersion = '0.1.3'
        ext.greetgoConfVersion = '1.1.4'
        ext.greetgoSchedulingVersion = "3.0.2"
        ext.postgresJdbcVersion = '9.4-1202-jdbc42'
        ext.springVersion = '2.1.3.RELEASE'
        ext.greetgoEmailVersion = "0.1.1"

        compile group: 'org.projectlombok', name: 'lombok', version: '1.18.6'
        annotationProcessor 'org.projectlombok:lombok:1.18.6'

        compile 'org.easytesting:fest-assert-core:2.0M10'
        compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.9.9'

    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }

    sourceSets.main.java.srcDirs = ["main/java"]
    sourceSets.test.java.srcDirs = ["test/java"]
    sourceSets.main.resources.srcDirs = ["main/resources"]
    sourceSets.test.resources.srcDirs = ["test/resources"]

    idea.module.downloadSources = true
    idea.module.downloadJavadoc = true
    idea.module.inheritOutputDirs = false
    idea.module.outputDir = file("$buildDir/classes/main/")
    idea.module.testOutputDir = file("$buildDir/classes/test/")

    jar {
        manifest {
            attributes 'Implementation-Title': project.name
            attributes 'Implementation-Version': 1.0
            attributes 'Implementation-Vendor': "nu"
            attributes 'Created-By': System.getProperty("user.name")
            attributes 'Created-At': new Date().format("yyyy-MM-dd/HH:mm:ss")
        }
    }

    war {
        manifest {
            attributes 'Implementation-Title': project.name
            attributes 'Implementation-Version': 1.0
            attributes 'Implementation-Vendor': "nu"
            attributes 'Created-By': System.getProperty("user.name")
            attributes 'Created-At': new Date().format("yyyy-MM-dd/HH:mm:ss")
        }
    }

}
